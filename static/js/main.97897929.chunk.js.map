{"version":3,"sources":["Components/TopToolBar.jsx","Components/DataImporter.jsx","state/DataProvider.js","state/Task.js","ds/ObjectComparator.js","ds/UniqueSortedSet.js","ds/Util.js","state/PlanGridData.js","state/PlanGridDataProcessor.js","Components/CapacityRow.jsx","Components/Home.jsx","routes.js","App.js","reportWebVitals.js","common/Constants.js","index.js"],"names":["useStyles","makeStyles","theme","menuButton","marginRight","spacing","title","flexGrow","TopToolBar","classes","React","useState","anchorEl","setAnchorEl","handleClose","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","to","MenuItem","Typography","variant","Button","callbackFunction","handleOnDrop","data","console","log","handleOnError","err","file","inputElem","reason","handleOnRemoveFile","DataProvider","url","this","callback","fetchCsv","csvData","Papa","parse","complete","fetch","then","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","Component","Task","mfProps","teamEstimates","uuidv4","ObjectComparator","item1","item2","UniqueSortedSet","comparator","insert","item","i","orderedValues","length","ithValue","compare","splice","push","valueSet","Map","has","set","Util","str","test","isBlank","desc","object","extractColumn","array","column","map","e","adder","a","b","substractor","removeItem","itemId","PlanGridData","addValue","rowKey","columnKey","taskProps","teamEstimate","logo","task","taskMaster","grid","taskList","handleAddCell","colKey","summarizeTeamEstimates","handleMove","taskId","fromCellId","toCellId","get","keyForCell","removedRowKey","removedColKey","tasksAtPrevLocation","targetRowKey","targetColKey","aggFn","teamSummaryForCol","teamCapacitySummary","Object","entries","team","estimate","newTotalEstimate","totalEstimate","capacityRow","teamCapacity","pendingCapacity","netCapacity","teamSummaryRow","columnKeys","rowKeys","cellIdToKeyMap","rowNo","colNo","rowValues","columnValues","reduce","add","orderedRowKeys","forEach","orderedColumnKeys","generateId","cellId","keyMap","teamName","avlCapacity","rtbCapacity","name","availableCapacity","key","concat","key2","value2","PlanGridDataProcessor","setTaskData","taskRawData","setTeamCapacity","teamRawData","props","teamPrefix","capacity","teamHeader","rtb","available","planGridData","processTeamCapacityData","processTaskData","translate","Promise","resolve","dataProvider","getTeamCapacityProvider","processCsvData","getTasksProvider","translateCsvToTeamData","translateCsvToTaskData","csvTable","headers","teamIndex","indexOf","avlCapIndex","rtbCapIndex","rowCount","parseInt","addTeamCapacity","rowIndex","columnIndex","columnCount","csvTableMinusHeader","slice","initialize","pivotRowValue","pivotColumnValue","j","cellValue","headerValue","startsWith","isNotBlank","RowContainer","styled","div","Row","CapacityContainer","CapacityRow","renderCapacityCell","capacityObj","quarter","retVal","teamNameArr","split","shift","teamNameFormatted","join","renderCapacityRow","TeamEstimate","TaskContainer","RowId","Header","h3","routes","path","component","onDrop","onError","noDrag","addRemoveButton","onRemoveFile","gridData","setGridData","useEffect","getProcessor","process","window","dir","Fragment","onDragEnd","destination","source","draggableId","droppableId","assign","index","renderColumnHeaders","rowId","rows","keys","colName","provided","ref","innerRef","droppableProps","placeholder","draggableProps","dragHandleProps","master_feature","renderRow","renderRows","App","route","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","TASK_NAME_KEY","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97897929.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function TopToolBar() {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton\n                    edge=\"start\"\n                    className={classes.menuButton}\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    onClick={handleClick}>\n                    <MenuIcon />\n                </IconButton>\n                <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}>\n                    <NavLink to={'/'}>\n                        <MenuItem onClick={handleClose}>Home</MenuItem>\n                    </NavLink>\n                    <NavLink to={'/loadData'}>\n                        <MenuItem onClick={handleClose}>Load Data From File</MenuItem>\n                    </NavLink>\n                </Menu>\n                <Typography variant=\"h6\" className={classes.title}>\n                </Typography>\n                <Button onClick={()=>{}} color=\"inherit\">New Card</Button>\n            </Toolbar>\n        </AppBar>\n    );\n\n}\n","import React from 'react';\nimport { CSVReader } from 'react-papaparse';\n\nlet callbackFunction;\n\nconst handleOnDrop = (data) => {\n  console.log('---------------------------');\n  callbackFunction(data);\n  console.log(data);\n  console.log('---------------------------');\n}\n\nconst handleOnError = (err, file, inputElem, reason) => {\n  console.log(err)\n}\n\nconst handleOnRemoveFile = (data) => {\n  console.log('---------------------------');\n  console.log(data);\n  console.log('---------------------------');\n}\n\nexport default function DataImporter({callback}) {\n    callbackFunction = callback ;\n\n    return (\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        noDrag\n        addRemoveButton\n        onRemoveFile={handleOnRemoveFile}\n      >\n        <span>Click to upload.</span>\n      </CSVReader>\n    )\n  }","import React from 'react';\nimport Papa from 'papaparse';\n\nexport default class DataProvider extends React.Component{\n    constructor(url){\n        super(url);\n        this.url = url;\n        this.data = [];\n    }\n\n    setData(data){\n        this.data = data ;\n    }\n\n    getData(data){\n        if(this.data){\n            return data ;\n        }\n        //TODO: Raise Error if data is accessed before it is available.\n    }\n\n    async processCsvData(callback) {\n        let csvData = await this.fetchCsv();\n\n        Papa.parse(csvData, {\n            complete: callback\n        });\n    }\n\n    fetchCsv() {\n        return fetch(this.url).then(function (response) {\n            let reader = response.body.getReader();\n            let decoder = new TextDecoder('utf-8');\n\n            return reader.read().then(function (result) {\n                return decoder.decode(result.value);\n            });\n        });\n    }\n\n    static getTasksProvider(){\n        return new DataProvider('/data/test-data.csv');\n    }\n\n    static getTeamCapacityProvider(){\n        return new DataProvider('/data/team-capacity.csv');\n    }\n\n}","import { v4 as uuidv4 } from 'uuid';\n\n\nexport default class Task{\n    constructor(mfProps, teamEstimates){\n        this.id = uuidv4();\n        // this.name = mfProps[\"master_feature\"];\n        this.mfProps = mfProps ;\n        this.teamEstimates = teamEstimates;\n    }\n}","export default class ObjectComparator{\n    compare(item1, item2){\n        if (item1 < item2) return -1 ;\n        if (item1 === item2) return 0 ;\n        if(item1> item2) return 1 ;\n    }\n}","import ObjectComparator from \"./ObjectComparator\";\n\nexport default class UniqueSortedSet {\n    constructor(comparator){\n        if(comparator){\n            this.comparator = comparator ;\n        }else{\n            this.comparator = new ObjectComparator();\n        }\n        \n        this.valueSet = new Map() ;\n        this.orderedValues =[];\n    }\n\n    insert = (item)=>{\n        for (let i = 0; i < this.orderedValues.length; i++) {\n            let ithValue = this.orderedValues[i];\n            if(this.comparator.compare(item, ithValue) <=0){\n                // item is less than ithValue ; TODO: could solve for efficiency\n                this.orderedValues.splice(i, 0,item);\n                return ;\n            }\n        }\n        this.orderedValues.push(item);  \n    }\n\n    add(item){\n        if(this.valueSet.has(item)) return ;\n        this.valueSet.set(item, true);\n        this.insert(item);\n    }\n\n    length(){\n        return this.orderedValues.length\n    }\n}","export default class Util{\n    static extractColumn = (array, column) => {return array.map(e=>e[column])};\n\n    static adder = (a,b)=>{return a+b ;}\n    static substractor = (a,b)=>{return a-b};\n\n    static removeItem = (array, itemId) =>{\n        for(let i=0; i <array.length;++i){\n            if (array[i].id === itemId){\n                array.splice(i,1);\n                return ;\n            }\n        }\n    }\n\n    static isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n\n    static isNotBlank(str){\n        return !Util.isBlank(str);\n    }\n\n    static log(desc){\n        console.log(desc);\n    }\n    static logo(desc, object){\n        console.log(desc + \":%o:\"+ \" \",object);\n    }\n}","import Task from \"./Task.js\";\nimport UniqueSortedSet from \"../ds/UniqueSortedSet.js\"\nimport Util from '../ds/Util'\n\nexport default class PlanGridData {\n    constructor(){\n        this.grid = {};\n        this.teamCapacity = {};\n        this.columnKeys = new UniqueSortedSet();\n        this.rowKeys = new UniqueSortedSet();\n        this.cellIdToKeyMap = new Map();\n        this.taskMaster = new Map();\n        this.teamCapacitySummary = new Map();\n\n    }\n\n    orderedRowKeys(){\n        return this.rowKeys.orderedValues;\n    }\n\n    orderedColumnKeys(){\n        return this.columnKeys.orderedValues;\n    }\n\n    generateId(rowNo, colNo){\n        return ''+rowNo + ',' + colNo ;\n    }\n\n    initialize(rowValues, columnValues){\n        this.rowKeys = rowValues.reduce((rowKeys,item)=>{\n            rowKeys.add(item);\n            return rowKeys;\n        },this.rowKeys);\n\n        this.columnKeys = columnValues.reduce((columnKeys, item)=>{\n            columnKeys.add(item);\n            return columnKeys ;\n        },this.columnKeys)\n\n        let [rowNo, colNo] =[-1,-1];\n\n        this.orderedRowKeys().forEach(rowKey => {\n            rowNo += 1 ;\n            this.grid[rowKey]={}\n            this.orderedColumnKeys().forEach(columnKey => {\n                colNo +=1 ;\n                let id = this.generateId(rowNo, colNo);\n                this.cellIdToKeyMap.set(id, {rowKey:rowKey, columnKey:columnKey});\n                this.grid[rowKey][columnKey]={id:id, taskList:[]};\n            });\n            colNo = -1 ;\n        });\n\n        //Initialize capacity summary for each column\n\n        this.orderedColumnKeys().forEach(columnKey => {\n            this.teamCapacitySummary.set(columnKey, new Map());\n        });\n    }\n\n    addValue = (rowKey, columnKey, taskProps, teamEstimate)=>{\n        // Initialize should have been called before\n        Util.log('In Add Value');\n        Util.logo('rowKey', rowKey);\n        Util.logo('teamEstimate', teamEstimate)\n\n\n        let task = new Task(taskProps,teamEstimate);\n        this.taskMaster.set(task.id, task);\n        this.grid[rowKey][columnKey].taskList.push(task);\n\n        this.handleAddCell(rowKey, columnKey, task);\n    }\n\n    handleAddCell = (rowKey, colKey, task)=>{\n        this.summarizeTeamEstimates(Util.adder, rowKey, colKey, task);\n    };\n\n    handleMove = (taskId, fromCellId, toCellId)=>{\n        // get task\n        let task = this.taskMaster.get(taskId);\n\n        //Remove from previous location\n        const [removedRowKey,removedColKey] = this.keyForCell(fromCellId);\n        let tasksAtPrevLocation = this.grid[removedRowKey][removedColKey].taskList ;\n        Util.removeItem(tasksAtPrevLocation, taskId);\n        this.summarizeTeamEstimates(Util.substractor, removedRowKey, removedColKey, task);\n\n        const [targetRowKey, targetColKey] = this.keyForCell(toCellId);\n        let tasksAtTargetLocation = this.grid[targetRowKey][targetColKey].taskList ;\n        tasksAtTargetLocation.push(task);\n        this.summarizeTeamEstimates(Util.adder, targetRowKey, targetColKey,task);\n    }\n\n\n\n    summarizeTeamEstimates = (aggFn, rowKey, colKey, task)=>{\n        Util.log('In Summarize');\n        Util.logo('Row Key ', rowKey);\n        Util.logo('Column Key ', colKey);\n        Util.logo('Task',task);\n\n        let teamSummaryForCol = this.teamCapacitySummary.get(colKey);\n        let teamEstimates = task.teamEstimates\n\n\n        if(!teamEstimates) return ;\n        for(const [team, estimate] of Object.entries(teamEstimates)){\n            let newTotalEstimate ;\n            if(teamSummaryForCol.has(team)){\n                let currTeamSummaryRow  = teamSummaryForCol.get(team);\n                newTotalEstimate = aggFn(currTeamSummaryRow.totalEstimate,estimate) ;\n            }else{\n                newTotalEstimate = aggFn(0,estimate) ;\n            }\n            let capacityRow = this.teamCapacity[team];\n            let pendingCapacity = capacityRow.netCapacity - newTotalEstimate ;\n            let teamSummaryRow = {...capacityRow, totalEstimate:newTotalEstimate, pendingCapacity: pendingCapacity};\n            teamSummaryForCol.set(team, teamSummaryRow);\n        }\n    }\n\n\n\n\n\n    keyForCell(cellId) {\n        let keyMap = this.cellIdToKeyMap.get(cellId);\n        let removedRowKey = keyMap.rowKey;\n        let removedColKey = keyMap.columnKey;\n        return [removedRowKey, removedColKey];\n    }\n\n    addTeamCapacity(teamName, avlCapacity, rtbCapacity){\n        let capacityRow = {name:teamName, availableCapacity:avlCapacity, rtbCapacity:rtbCapacity, netCapacity: avlCapacity-rtbCapacity};\n        this.teamCapacity[teamName] = capacityRow;\n    }\n\n    toString(){\n        for (const [ key, value ] of Object.entries(this.grid)) {\n            console.log(\"key=\".concat(key));\n            console.log(\"valuetype=\".concat(typeof(value)));\n            for (const [ key2, value2 ] of Object.entries(value)){\n                console.log((\"value.key=\").concat(key2));\n                console.log((\"value.value=\").concat(value2));\n            }\n        }\n\n    }\n\n\n}\n","import DataProvider from \"./DataProvider.js\"\nimport PlanGridData from \"./PlanGridData.js\";\nimport Util from '../ds/Util';\n\nexport default class PlanGridDataProcessor {\n    constructor(){\n        this.props = {};\n        //TODO: Fix props key consistency\n\n        this.props.rowKey = \"initiative\";\n        this.props.columnKey = \"period\" ;\n        this.props.teamPrefix = \"team.\";\n        this.props.capacity = {};\n        this.props.capacity.teamHeader = \"team\";\n        this.props.capacity.rtb = \"rtb\";\n        this.props.capacity.available = \"available_capacity\";\n\n        this.planGridData = new PlanGridData();\n    }\n\n    setTaskData = (data) => {\n        console.log(\"Setting Task Data\");\n        this.taskRawData = data ;\n    }\n\n    setTeamCapacity = (data) => {\n        console.log(\"Setting Team Capacity\");\n        this.teamRawData = data ;\n    }\n\n    async process(){\n        await this.processTeamCapacityData();\n        await this.processTaskData();\n        this.translate();\n        console.log(this.planGridData);\n        return Promise.resolve(this.planGridData);\n    }\n\n    async processTeamCapacityData(){\n        let dataProvider = DataProvider.getTeamCapacityProvider();\n        await dataProvider.processCsvData(this.setTeamCapacity)\n        console.log(\"Done processing team Capacity Data\");\n    }\n\n    async processTaskData(){\n        let dataProvider = DataProvider.getTasksProvider();\n        await dataProvider.processCsvData(this.setTaskData);\n        console.log(\"Done processing team task Data\");\n    }\n\n    translate(){\n        this.translateCsvToTeamData();\n        this.translateCsvToTaskData();\n    }\n\n    translateCsvToTeamData(){\n        if(!this.teamRawData){\n            console.log('Trying to process CSV but no data found');\n            return ;\n        }\n\n        let csvTable = this.teamRawData.data;\n        let headers = csvTable[0];\n\n        let teamIndex = headers.indexOf(this.props.capacity.teamHeader);\n        let avlCapIndex = headers.indexOf(this.props.capacity.available);\n        let rtbCapIndex = headers.indexOf(this.props.capacity.rtb);\n        let rowCount = csvTable.length;\n\n        for (let i = 1; i < rowCount; ++i) {\n            let teamName = csvTable[i][teamIndex];\n            let avlCapacity = parseInt(csvTable[i][avlCapIndex]);\n            let rtbCapacity = parseInt(csvTable[i][rtbCapIndex]);\n\n            this.planGridData.addTeamCapacity(teamName, avlCapacity, rtbCapacity);\n        }\n        return this.planGridData;\n    }\n\n    translateCsvToTaskData() {\n        if(!this.taskRawData){\n            console.log('Trying to process CSV but no data found');\n            return ;\n        }\n\n        let csvTable = this.taskRawData.data;\n        let headers = csvTable[0];\n\n        let rowIndex = headers.indexOf(this.props.rowKey);\n        let columnIndex = headers.indexOf(this.props.columnKey);\n        let rowCount = this.taskRawData.data.length;\n        let columnCount = headers.length;\n\n        //Remove header row\n        let csvTableMinusHeader = csvTable.slice(1);\n\n        let rowValues = Util.extractColumn(csvTableMinusHeader, rowIndex);\n        let columnValues = Util.extractColumn(csvTableMinusHeader, columnIndex);\n        this.planGridData.initialize(rowValues, columnValues);\n\n        for (let i = 1; i < rowCount; ++i) {\n            let pivotRowValue;\n            let pivotColumnValue;\n            let teamEstimates = {};\n            let taskProps = {};\n\n            for (let j = 0; j < columnCount; ++j) {\n                let cellValue = csvTable[i][j];\n                let headerValue = headers[j];\n\n                if (j === rowIndex) {\n                    pivotRowValue = cellValue;\n                } else if (j === columnIndex) {\n                    pivotColumnValue = cellValue;\n                } else if (headerValue.startsWith(this.props.teamPrefix)) {\n                    //Processing Estimate\n                    if (Util.isNotBlank(cellValue)) {\n                        let estimate = parseInt(cellValue);\n                        teamEstimates[headerValue] = estimate;\n                    } else {\n                        // don't need to process estimate\n                    }\n                } else {\n                    //Processing a regular prop\n                    taskProps[headerValue] = cellValue;\n                }\n            }\n            // End Processing of a row\n            this.planGridData.addValue(pivotRowValue, pivotColumnValue, taskProps, teamEstimates);\n        }\n        return this.planGridData;\n    }\n\n    static getProcessor(){\n        return new PlanGridDataProcessor();\n    }\n}\n","import React , {useEffect} from 'react';\nimport styled from 'styled-components';\n\nconst RowContainer = styled.div`\ndisplay: flex;\nflex-wrap: nowrap;\npadding: 0 10px 0 10px;\n`;\nconst Row = styled.div`\nflex: 1 1 20%;\nborder: 1px solid black;\n`;\n\nconst CapacityContainer = styled.div`\nflex: 1 1 10px;\nfont-size: 14px;\nborder: 1px solid #d8e8f8;\n`;\n\nexport default function CapacityRow({teamCapacitySummary}) {\n\n    const renderCapacityCell = (capacityObj, quarter) => {\n        const retVal = [];\n\n        capacityObj.forEach((teamCapacity, key) => {\n            const {\n                availableCapacity,\n                name,\n                netCapacity,\n                pendingCapacity,\n                rtbCapacity,\n                totalEstimate\n            } = teamCapacity;\n\n            const teamNameArr = name.split('.')\n            teamNameArr.shift();\n            const teamNameFormatted = teamNameArr.join(' ');\n\n            retVal.push(\n                <CapacityContainer key={key}>\n                    <div>\n                        <div>{teamNameFormatted}</div>\n                        <div>Available Capacity : {netCapacity}</div>\n                        <div>Total Estimate : {totalEstimate}</div>\n                        <div>Pending Capacity : {pendingCapacity}</div>\n                     </div>\n                </CapacityContainer>\n            );\n        });\n\n        return retVal;\n    }\n\n    const renderCapacityRow = (teamCapacitySummary) => {\n        const retVal = []\n\n        if (!teamCapacitySummary) {\n            return retVal;\n        }\n\n        teamCapacitySummary.forEach((capacityObj, key) =>{\n\n            retVal.push(<Row key={key}>{renderCapacityCell(capacityObj, key)}</Row>);\n        });\n\n        return retVal;\n    }\n\n    return (\n        <RowContainer>\n            <Row>Capacity Summary</Row>\n            {renderCapacityRow(teamCapacitySummary)}\n        </RowContainer>\n\n    )\n}\n","import React , {useEffect} from 'react';\nimport PlanGridDataProcessor from '../state/PlanGridDataProcessor';\nimport CapacityRow from './CapacityRow';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport {Draggable, Droppable} from 'react-beautiful-dnd';\n\nconst TeamEstimate = styled.div`\nfont-size: 12px;\ncolor: #485757;\n`\n\nconst TaskContainer = styled.div`\nflex: 1 1 10px;\nbackground-color: #f0f8ff;\nborder: 1px solid #d8e8f8;\nfont-size: 14px;\n`;\n\nconst RowContainer = styled.div`\ndisplay: flex;\nflex-wrap: nowrap;\npadding: 0 10px 0 10px;\n`;\n\nconst RowId = styled.div`\nfont-weight: 700;\nfont-size: 18px;\nflex: 1 1 20%;\nborder: 1px solid black;\n`\nconst Row = styled.div`\nflex: 1 1 20%;\nborder: 1px solid black;\n`;\nconst Header = styled.h3`\nflex: 1 1 20%;\nborder: 1px solid black;\n`;\n\nconst getGridData = () => {\n    let dataProcessor = PlanGridDataProcessor.getProcessor() ;\n    return dataProcessor.process();\n}\n\n\n\nexport default function Home() {\n    const [gridData, setGridData] = React.useState({});\n    useEffect(() => {\n        getGridData().then(data => {\n            window.gridData = data;\n            setGridData(data);\n        });\n    }, []);\n\n    const onDragEnd = result => {\n        const {destination, source, draggableId} = result ;\n\n        if (!destination || !source || !draggableId) {\n            return\n        }\n\n        gridData.handleMove(draggableId, source.droppableId, destination.droppableId);\n        setGridData(Object.assign({}, gridData))\n    }\n\n    const renderColumnHeaders = ({columnKeys}) => {\n        if (!columnKeys) {\n            return\n        }\n\n        return columnKeys.orderedValues.map((id, index) => {\n            return (<Header key={index}>{id}</Header>);\n        });\n    }\n\n    const renderRow = (rowValues) => {\n        const columnKeys = Object.keys(rowValues);\n        return columnKeys.map((colName) => {\n            const {id, taskList} = rowValues[colName];\n\n\n            return (\n                <Droppable droppableId={id} key={id}>\n                    {(provided)=>(\n\n                        <Row ref={provided.innerRef} {...provided.droppableProps}>\n                            {provided.placeholder}\n                            {taskList.map((task, index) => {\n                                return (\n                                    <Draggable draggableId={task.id} index={index} key={task.id}>\n                                        {(provided) => (\n                                            <TaskContainer {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} key={index}>\n                                                <div>{task.mfProps.master_feature}</div>\n                                                {Object.keys(task.teamEstimates).map((id, index) => {\n                                                        return <TeamEstimate key={index}>{id} : {task.teamEstimates[id]}</TeamEstimate>\n                                                })}\n\n                                            </TaskContainer>\n                                        )}\n                                    </Draggable>\n                                );\n                            })}\n                        </Row>\n                    )}\n\n                </Droppable>)\n            })\n        }\n\n        const renderRows = ({rowKeys, grid}) => {\n            if (!rowKeys) {\n                return\n            }\n\n            return rowKeys.orderedValues.map((rowId, index) => {\n                const rowValues = grid[rowId];\n                const rows = renderRow(rowValues);\n                return (\n                    <RowContainer key={index}>\n                        <RowId>{rowId}</RowId>\n                        {rows}\n                    </RowContainer >\n                );\n            });\n        }\n\n        console.dir(gridData);\n        return (\n            <React.Fragment>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <RowContainer >\n                        <Header>Initatives</Header>\n                        {renderColumnHeaders(gridData)}\n                    </RowContainer >\n                    {renderRows(gridData)}\n                </DragDropContext>\n                <CapacityRow teamCapacitySummary={gridData.teamCapacitySummary}/>\n            </React.Fragment>\n        )\n    }\n","import DataImporter from './Components/DataImporter';\nimport Home from './Components/Home';\n\nconst routes = [\n  {\n    path: \"/loadData\",\n    component: DataImporter\n  },\n  {\n    path: \"/\",\n    component: Home\n  }\n];\n\nexport default routes;\n","import './App.css';\nimport React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport TopToolBar from './Components/TopToolBar';\nimport routes from './routes.js';\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <TopToolBar />\n                <Switch>\n                    {routes.map((route, index) => (\n                        <Route\n                        key={index}\n                        path={route.path}\n                        component={route.component}\n                        render={route.render}\n                        />\n\n                    ))}\n                </Switch>\n        </BrowserRouter>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const TASK_NAME_KEY = \"master_feature\";\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nexport * from './common/Constants'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}